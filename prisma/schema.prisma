// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(200)
  description String? @db.Text
  price       Int
  discount    Int     @default(0) @db.SmallInt
  stock       Int?
  code        String  @unique @db.VarChar(25)

  category     Category? @relation(fields: [categoryCode], references: [code], onDelete: SetNull)
  categoryCode String?   @map("category_code") @db.VarChar(25)

  subCategory     SubCategory? @relation(fields: [subCategoryCode], references: [code], onDelete: SetNull)
  subCategoryCode String?      @map("sub_category_code") @db.VarChar(25)

  images Image[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  OrderProducts OrdersProducts[]

  @@map("products")
}

model Category {
  id            Int    @id @default(autoincrement())
  name          String @db.VarChar(200)
  nameLowercase String @unique @map("name_lowercase") @db.VarChar(200)

  code String @unique @db.VarChar(25)

  products Product[]

  subCategories SubCategory[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("categories")
}

model SubCategory {
  id            Int    @id @default(autoincrement())
  name          String @db.VarChar(200)
  nameLowercase String @unique @map("name_lowercase") @db.VarChar(200)

  category     Category @relation(fields: [categoryCode], references: [code], onDelete: Cascade)
  categoryCode String   @map("category_code") @db.VarChar(25)

  code String @unique @db.VarChar(25)

  products Product[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("sub_categories")
}

model Image {
  id String @unique

  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId Int?     @map("product_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  @@map("images")
}

model Wilaya {
  id              Int     @id @default(autoincrement())
  name            String  @db.VarChar(100)
  arName          String  @map("ar_name") @db.VarChar(100)
  code            Int     @unique @db.SmallInt
  availableHome   Boolean @default(true)
  availableOffice Boolean @default(true)
  homePrice       Int     @default(400) @map("home_price")
  officePrice     Int     @default(200) @map("office_price")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  orders    Order[]
  User      User[]
  Town      Town[]
  Locations Locations[]

  @@map("wilayas")
}

model Town {
  id     Int    @id @default(autoincrement())
  name   String @db.VarChar(100)
  arName String @map("ar_name") @db.VarChar(100)
  code   Int    @unique @db.Integer

  wilaya     Wilaya @relation(fields: [wilayaCode], references: [code], onDelete: Cascade)
  wilayaCode Int    @map("wilaya_code")

  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamptz(3)
  User      User[]
  Order     Order[]
  Locations Locations[]

  @@map("towns")
}

model Order {
  id Int @id @default(autoincrement())

  code   String  @unique @db.VarChar(100)
  status Status  @default(UNCONFIRMED)
  isHome Boolean @default(true) @map("is_home")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  wilaya   Wilaya @relation(fields: [wilayaId], references: [id], onDelete: Cascade)
  wilayaId Int    @map("wilaya_id")

  town   Town @relation(references: [id], fields: [townId], onDelete: Cascade)
  townId Int  @map("town_id")

  address String? @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  orderProducts OrdersProducts[]

  @@map("orders")
}

model OrdersProducts {
  product     Product @relation(fields: [productCode], references: [code], onDelete: Cascade)
  productCode String  @db.VarChar(25)

  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  @@id([productCode, orderId])
  @@map("orders_products")
}

model Locations {
  id              String  @unique @db.VarChar(25)
  name            String  @db.VarChar(150)
  coordinates     String? @db.VarChar(255)
  additionalCosts Int?    @default(0) @map("additional_costs")

  town       Town   @relation(fields: [townCode], references: [code])
  townCode   Int    @map("town_code") @db.Integer
  wilaya     Wilaya @relation(fields: [wilayaCode], references: [code])
  wilayaCode Int    @map("wilaya_code") @db.Integer

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)
}

model User {
  id String @id @default(cuid())

  name          String?   @db.VarChar(100)
  lastName      String?   @map("last_name") @db.VarChar(100)
  email         String?   @unique @db.VarChar(255)
  address       String?   @db.VarChar(255)
  // TODO: REQUIRE THIS ON NEXTAUTH SIGNIN  CALLBACK
  // the ? is only used for oauth convinience. This field should always be added when creating a user other than the admin
  phone         String?   @unique @db.VarChar(15)
  emailVerified DateTime?
  image         String?

  wilaya   Wilaya? @relation(references: [id], fields: [wilayaId], onDelete: SetNull)
  wilayaId Int?    @map("wilaya_id")

  town   Town? @relation(references: [id], fields: [townId], onDelete: SetNull)
  townId Int?  @map("town_id")

  orders    Order[]
  blacklist Blacklist?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  Account Account[]
  Session Session[]

  @@unique([email, phone])
  @@map("users")
}

model Blacklist {
  id Int @id @default(autoincrement())

  user      User?   @relation(fields: [userPhone], references: [phone], onDelete: Cascade)
  userPhone String? @unique @db.VarChar(15)

  phone  String  @unique @db.VarChar(15)
  reason String? @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@unique([phone, userPhone])
  @@map("blacklist")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Status {
  UNCONFIRMED
  CONFIRMED
  SHIPPING // the package is on the way
  SUCCESS
  CANCELED
  RETURNED
}
